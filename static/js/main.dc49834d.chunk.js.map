{"version":3,"sources":["Components/Application.ts","Components/AddApplication.tsx","Components/ApplicationLine.tsx","Components/Organizer.tsx","App.js","serviceWorker.js","index.js"],"names":["ApplicationState","getStateIcon","state","Todo","Sent","MeetingScheduled","Waiting","Accepted","Refused","AddApplication","props","name","link","handleNameChange","bind","handleLinkChange","handleSubmit","event","this","setState","target","value","onAddApplication","preventDefault","className","onSubmit","htmlFor","id","type","onChange","React","Component","ApplicationLine","handleDelete","handleStateChange","onDelete","option","onStateChange","url","stateOptions","Object","values","filter","key","map","label","icon","selectedOption","find","o","labelId","displayedUrl","replace","options","defaultValue","formatOptionLabel","optionId","role","aria-labelledby","href","onClick","defaultData","appCount","Organizer","apps","storedApps","localStorage","getItem","JSON","parse","setItem","stringify","Math","max","app","applications","addApplication","deleteApplication","changeApplicationState","updateStoredData","data","newElement","concat","applicationState","copy","CSSTransition","timeout","enter","exit","classNames","TransitionGroup","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc49834d.chunk.js","sourcesContent":["export enum ApplicationState {\n  Todo = 1,\n  Sent,\n  MeetingScheduled,\n  Waiting,\n  Accepted,\n  Refused\n}\n\nexport function getStateIcon(state: ApplicationState | number): string {\n\tswitch (state) {\n\t\tcase ApplicationState.Todo: return 'â˜•';\n\t\tcase ApplicationState.Sent: return 'ðŸ“¨';\n\t\tcase ApplicationState.MeetingScheduled: return 'ðŸŽ¤';\n\t\tcase ApplicationState.Waiting: return 'ðŸ˜±';\n\t\tcase ApplicationState.Accepted: return 'ðŸŽ‰';\n\t\tcase ApplicationState.Refused: return 'ðŸ’©';\n\t\tdefault: return '';\n\t}\n}\n\nexport interface ApplicationData {\n  name: string,\n  state: ApplicationState,\n  link?: string,\n  applicationDate?: Date,\n  nextMeeting?: Date,\n}\n\nexport interface Application extends ApplicationData {\n\tid: number\n}","import React from 'react';\nimport {ApplicationState, ApplicationData} from './Application';\n\nexport interface AddProps {\n  onAddApplication: (data: ApplicationData) => void\n}\n\nclass AddApplication extends React.Component<AddProps, ApplicationData> {\n  constructor(props: AddProps) {\n    super(props);\n    this.state = {\n      name: '',\n      link: '',\n      state: ApplicationState.Todo\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleLinkChange = this.handleLinkChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleLinkChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      link: event.target.value\n    });\n  }\n\n  handleSubmit(event: React.FormEvent<HTMLElement>) {\n    this.props.onAddApplication(this.state);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"addForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"name\">Name:</label>\n        <input id=\"name\" type=\"text\" value={this.state.name} onChange={this.handleNameChange} />\n\n        <label htmlFor=\"link\">Job offer link:</label>\n        <input id=\"link\" type=\"text\" value={this.state.link} onChange={this.handleLinkChange} />\n        \n        <input type=\"submit\" value=\"Add\" />\n      </form>\n    );\n  }\n}\n\nexport default AddApplication;\n","import React from 'react';\nimport {Application, ApplicationState, getStateIcon} from './Application';\nimport Select, {ValueType} from 'react-select';\n\ninterface LineProps extends Application {\n  onDelete: (id: number) => void,\n  onStateChange: (id: number, state: ApplicationState) => void\n}\n\ninterface LineState {\n  applicationState: ApplicationState\n}\n\ninterface stateOption {\n  value: ApplicationState,\n  label: string,\n  icon: string\n}\n\nclass ApplicationLine extends React.Component<LineProps, LineState> {\n  constructor(props: LineProps) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleStateChange = this.handleStateChange.bind(this);\n  }\n\n  handleDelete(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.onDelete(this.props.id);\n  }\n\n  handleStateChange(option: ValueType<stateOption>) {\n    if (option) {\n      this.props.onStateChange(this.props.id, (option as stateOption).value);\n    }\n  }\n\n  render() {\n    const states = Object.values(ApplicationState).filter(key => typeof key === 'number') as ApplicationState[];\n    const stateOptions: Array<stateOption> = states.map(state => ({\n      value: state,\n      label: ApplicationState[state],\n      icon: getStateIcon(state)\n    }));\n\n    const selectedOption = stateOptions.find(o => o.value === this.props.state);\n\n    const optionformatter = (option: stateOption) =>  {\n      const optionId = \"option\" + option.value;\n      return (<div className=\"optionContainer\">\n        <span className=\"icon\" role=\"img\" aria-labelledby={optionId}>{option.icon}</span>\n        <span id={optionId}>{option.label}</span>\n      </div>);\n    }\n\n    const labelId = 'linkLabel' + this.props.id;\n    const displayedUrl = simplifyUrl(this.props.link);\n\n    return (\n      <div className=\"application\">\n        <div className=\"applicationContent\">\n          <span>{this.props.name}</span>\n          \n          <Select\n            className=\"stateSelector\"\n            options={stateOptions}\n            defaultValue={selectedOption}\n            formatOptionLabel={optionformatter}\n            onChange={this.handleStateChange}\n          />\n\n          <div className=\"link\">\n            {this.props.link &&\n              <a href={this.props.link}>\n                <span className=\"icon\" role=\"img\" aria-labelledby={labelId}>ðŸ”—</span>\n                <span className=\"linkLabel\" id={labelId}>{displayedUrl}</span>\n              </a>\n            }\n          </div>\n        </div>\n\n        <button className=\"deleteButton\" onClick={this.handleDelete}></button>\n      </div>\n    );\n  }\n}\n\nfunction simplifyUrl(url?: string) {\n  if (!url)\n    return '';\n\n  return url.replace('https://', '').replace('http://', '');\n}\n\nexport default ApplicationLine;\n","import React, {Fragment} from 'react';\nimport AddApplication from './AddApplication';\nimport ApplicationLine from './ApplicationLine';\nimport {Application, ApplicationData, ApplicationState} from './Application';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst defaultData = [\n  {id:0, name: \"Space X\", link: \"https://www.spacex.com/careers/index.html\", state: ApplicationState.Sent},\n  {id:1, name: \"ESA\", link: \"http://www.esa.int/About_Us/Careers_at_ESA\", state: ApplicationState.Waiting},\n  {id:2, name: \"NASA\", link: \"https://www.nasa.gov/careers\", state: ApplicationState.Todo}\n];\n\ninterface OrganizerProps { }\n\ninterface OrganizerState {\n  applications: Array<Application>\n}\n\nlet appCount = 0;\nclass Organizer extends React.Component<OrganizerProps, OrganizerState> {\n  constructor(props: OrganizerProps) {\n    super(props);\n\n    let apps = defaultData;\n    let storedApps = localStorage.getItem('applications');\n    if (storedApps) {\n      apps = JSON.parse(storedApps);\n    } else {\n      localStorage.setItem('applications', JSON.stringify(apps));\n    }\n\n    appCount = Math.max(0, ...apps.map(app => app.id));\n\n    this.state = {\n      applications: apps\n    }\n\n    this.addApplication = this.addApplication.bind(this);\n    this.deleteApplication = this.deleteApplication.bind(this);\n    this.changeApplicationState = this.changeApplicationState.bind(this);\n    this.updateStoredData = this.updateStoredData.bind(this);\n  }\n\n  addApplication(data: ApplicationData) {\n    const newElement: Application = {\n      id: ++appCount,\n      ...data\n    };\n\n    this.setState(\n      state => ({\n        applications: state.applications.concat(newElement)\n      }),\n      () => this.updateStoredData()\n    );\n  }\n\n  deleteApplication(id: number) {\n    this.setState(\n      state => ({\n        applications: state.applications.filter(app => app.id !== id)\n      }),\n      () => this.updateStoredData()\n    );\n  }\n\n  changeApplicationState(id: number, applicationState: ApplicationState) {\n    this.setState(\n      state => ({\n        applications: state.applications.map(app => {\n          if (app.id === id) {\n            const copy: Application = {...app};\n            copy.state = applicationState;\n            return copy;\n          } else {\n            return app;\n          }\n        })\n      }),\n      () => this.updateStoredData()\n    );\n  }\n\n  updateStoredData() {\n    localStorage.setItem('applications', JSON.stringify(this.state.applications));\n  }\n\n  render() {\n    const applications = this.state.applications.map(data => \n      <CSSTransition\n        key={data.id}\n        timeout={{\n          enter: 500,\n          exit: 300\n        }}\n        classNames=\"item\">\n        <ApplicationLine\n          onDelete={this.deleteApplication}\n          onStateChange={this.changeApplicationState}\n          {...data}\n        />\n      </CSSTransition>\n    );\n\n    return (\n      <Fragment>\n        <TransitionGroup>\n          {applications}\n        </TransitionGroup>\n        <AddApplication onAddApplication={this.addApplication} />\n      </Fragment>\n    );\n  }\n}\n\nexport default Organizer;\n","import React from 'react';\nimport './App.css';\nimport Organizer from './Components/Organizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"appContent\">\n        <h3>Job applications state tracking</h3>\n        <h4>stay organized !</h4>\n        <Organizer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}